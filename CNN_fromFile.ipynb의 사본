{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"colab":{"name":"CNN_fromFile.ipynb의 사본","provenance":[{"file_id":"1TV9HWkOKXcFNMgT7tPgsQjmtqWaElznh","timestamp":1596718004002}],"private_outputs":true,"collapsed_sections":[]},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"Dhow5w0Cyhu9","colab_type":"text"},"source":["# CNN Example FromFile by Keras\n","* Trains a simple convnet on the MNIST dataset from file(3 Class from Folder). \n","* Gets to 0.98% test accuracy after 10 epochs\n","* Unser 1 seconds per epoch on a GPU."]},{"cell_type":"code","metadata":{"id":"bIcSLm6Cyhu-","colab_type":"code","colab":{}},"source":["from __future__ import absolute_import, division, print_function, unicode_literals\n","\n","import tensorflow as tf\n","\n","from tensorflow.keras import datasets, layers, models, optimizers\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"z3_tr9TGyhvC","colab_type":"code","colab":{}},"source":["from os import listdir\n","from os.path import isfile, join\n","from pylab import *\n","from numpy import *\n","import os\n","from skimage.transform import resize\n","\n","def getFolder(thePath,isFile=True):\n","    return [f for f in listdir(thePath) if isFile == isfile(join(thePath, f)) ]\n","\n","def getImagesAndLabels(tPath,isGray=True):\n","    labels=getFolder(tPath,False)\n","    tImgDic={f:getFolder(join(tPath,f)) for f in labels}\n","    tImages,tLabels=None,None\n","    ks=sorted(list(tImgDic.keys()))\n","    oh=np.identity(len(ks))\n","    for label in tImgDic.keys():\n","        for image in tImgDic[label]:\n","            le=np.array([float(label)],ndmin=1)\n","            img_color=imread(join(tPath,label,image))\n","            img_color=resize(imread(join(tPath,label,image)), (180,240)) #resize the images to the equal size\n","            if isGray:\n","                img=img_color[:,:,1]\n","            img1d=img.reshape([1,-1])\n","            if tImages is None:\n","                tImages, tLabels =img1d, le\n","            else:\n","                tImages,tLabels = np.concatenate((tImages,img1d),axis=0), np.append(tLabels,le ,axis=0)\n","    return (tImages,tLabels)\n","\n","\n","\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3o5puJV1ufUZ","colab_type":"code","colab":{}},"source":["%%bash\n","rm -r /content/flower_photos/daisy\n","rm -r /content/flower_photos/dandelion\n","rm -r /content/flower_photos/0/daisy\n","rm -r /content/flower_photos/1/dandelion\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GqiYfJmOryXK","colab_type":"code","colab":{}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qhiYmtKSyT0A","colab_type":"code","colab":{}},"source":["%%bash\n","rm /content/gdrive\n","mkdir \"/content/drive/My Drive/Colab Notebooks\"\n","ln -s \"/content/drive/My Drive/Colab Notebooks\" /content/gdrive\n","cd /content/gdrive"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oBEX9oYCfIJR","colab_type":"code","colab":{}},"source":["dir(os)\n","os.listdir('/content')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0MEygZQgNE3Y","colab_type":"code","colab":{}},"source":["#Assignment - classifying flower photos\n","%%bash\n","wget http://download.tensorflow.org/example_images/flower_photos.tgz\n","tar -xzvf flower_photos.tgz"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GqAWfRGGNeKM","colab_type":"code","colab":{}},"source":["%%bash\n","rm flower_photos/LICENSE.txt  \n","cd flower_photos/\n","mv daisy      0\n","mv dandelion  1\n","rm -rf roses      \n","rm -rf sunflowers  \n","rm -rf tulips"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QER6JLZs4PSV","colab_type":"code","colab":{}},"source":["labels = getFolder('flower_photos',False)\n","print(labels)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fLFXGZ0vey9Z","colab_type":"code","colab":{}},"source":["tPath = 'flower_photos/'\n","data_images, data_labels = getImagesAndLabels(tPath)\n","print(data_images.shape, data_labels.shape)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k0D_jfHPN6U1","colab_type":"code","colab":{}},"source":["print(np.unique(data_labels, return_counts=True))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Sq4PFUCEPasH","colab_type":"code","colab":{}},"source":["train_images = np.concatenate((data_images[:500,:], data_images[850:,:]), axis=0).reshape((-1,180,240,1))/255.0\n","train_labels = np.concatenate((data_labels[:500], data_labels[850:]), axis=0)\n","test_images = data_images[500:849].reshape((-1,180,240,1))/255.0\n","test_labels = data_labels[500:849]\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1OkJIWh2dKdi","colab_type":"code","colab":{}},"source":["print(train_images.shape, train_labels.shape)\n","print(test_images.shape, test_labels.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YB-XCvBFzYDK","colab_type":"code","colab":{}},"source":["\n","import matplotlib.pyplot as plt\n","plt.gray()\n","plt.axis(\"off\") \n","plt.title(\" Label = \"+str(train_labels[400]) ) \n","plt.imshow(train_images[400].reshape(180,240))\n","\n","# i0=train_images[0]\n","# print(np.max(i0),np.min(i0),i0.shape,train_labels.shape,train_labels[0])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Kk0CsU6LyhvI","colab_type":"code","colab":{}},"source":["#original code\n","\n","# model = models.Sequential()\n","# model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\n","# model.add(layers.MaxPooling2D((2, 2)))\n","# model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","# model.add(layers.MaxPooling2D((2, 2)))\n","# model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","# model.add(layers.Flatten())\n","# model.add(layers.Dense(64, activation='relu'))\n","# model.add(layers.Dense(10, activation='softmax'))\n","# model.summary()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8JRnP3WoMACn","colab_type":"code","colab":{}},"source":["#original code fitted to this data\n","\n","# model = models.Sequential()\n","# model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(180,240, 1)))\n","# model.add(layers.MaxPooling2D((2, 2)))\n","# model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","# model.add(layers.MaxPooling2D((2, 2)))\n","# model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","# model.add(layers.Flatten())\n","# model.add(layers.Dense(64, activation='relu'))\n","# model.add(layers.Dense(2, activation='softmax'))\n","# model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pKltpBfwhjEF","colab_type":"code","colab":{}},"source":["#ccp-ccp-ff\n","\n","# model = models.Sequential()\n","# model.add(layers.Conv2D(16, (3, 3), activation='relu', input_shape=(180,240, 1)))\n","# model.add(layers.Conv2D(16, (3, 3), activation='relu'))\n","# model.add(layers.MaxPooling2D((2, 2)))\n","# model.add(layers.Conv2D(32, (3, 3), activation='relu'))\n","# model.add(layers.Conv2D(32, (3, 3), activation='relu'))\n","# model.add(layers.MaxPooling2D((2, 2)))\n","# model.add(layers.Flatten())\n","# model.add(layers.Dense(32, activation='relu'))\n","# model.add(layers.Dense(2, activation='softmax'))\n","# model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6S6nqLZRRpBu","colab_type":"code","colab":{}},"source":["# model = models.Sequential()\n","# model.add(layers.Conv2D(64, (3, 3), activation='relu', input_shape=(180,240, 1)))\n","# model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","# model.add(layers.MaxPooling2D((2, 2)))\n","# model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n","# model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n","# model.add(layers.MaxPooling2D((2, 2)))\n","# model.add(layers.Flatten())\n","# model.add(layers.Dense(128, activation='relu'))\n","# model.add(layers.Dense(2, activation='softmax'))\n","# model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cc9GmJ92YDQo","colab_type":"code","colab":{}},"source":["#modeled after alexnet\n","\n","model = models.Sequential()\n","model.add(layers.Conv2D(64, (10, 10), strides=(4,4), activation='relu', input_shape=(180,240, 1)))\n","model.add(layers.MaxPooling2D((3, 3), strides=(2,2)))\n","model.add(layers.Conv2D(128, (5, 5), strides=(1,1), activation='relu'))\n","model.add(layers.MaxPooling2D((3, 3), strides=(2,2)))\n","model.add(layers.Conv2D(256, (3, 3), strides=(1,1), activation='relu'))\n","model.add(layers.Conv2D(256, (3, 3), strides=(1,1), activation='relu'))\n","model.add(layers.Conv2D(128, (3, 3), strides=(1,1), activation='relu'))\n","model.add(layers.Flatten())\n","model.add(layers.Dense(512, activation='relu'))\n","model.add(layers.Dense(512, activation='relu'))\n","model.add(layers.Dense(2, activation='softmax'))\n","model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z8n7Q1jfyhvM","colab_type":"code","colab":{}},"source":["# model.compile(optimizer='adam',\n","#               loss='sparse_categorical_crossentropy',\n","#               metrics=['accuracy'])\n","\n","# model.fit(train_images, train_labels, epochs=10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AvRYQO67cg5m","colab_type":"code","colab":{}},"source":["# model.compile(optimizer='SGD',\n","#               loss='sparse_categorical_crossentropy',\n","#               metrics=['accuracy'])\n","\n","# model.fit(train_images, train_labels, epochs=10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"STL1O7Kw2yZx","colab_type":"code","colab":{}},"source":["#Finding the best learning rate\n","\n","# np.random.seed(1)\n","# best_acc = 0\n","# best_lr = 0\n","# for i in range(5):\n","#   lr = 10**(np.random.uniform(-5,-4))\n","#   model.compile(optimizer=optimizers.Adam(learning_rate=lr),\n","#                 loss='sparse_categorical_crossentropy',\n","#                 metrics=['accuracy'])\n","#   history = model.fit(train_images, train_labels, epochs=10, verbose=0)\n","#   score = model.evaluate(test_images, test_labels, verbose=0)\n","#   print('\\nlearning rate: ', lr)\n","#   print('Test loss:', score[0])\n","#   print('Test accuracy:', score[1])\n","#   if score[1]>best_acc:\n","#     best_acc = score[1]\n","#     best_lr = lr\n","# print(f'\\nbest_acc: {best_acc}, best_lr: {best_lr}')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Azo30AbNyKDn","colab_type":"code","colab":{}},"source":["lr = 10**(-4.28)\n","model.compile(optimizer=optimizers.Adam(learning_rate=lr),\n","              loss='sparse_categorical_crossentropy',\n","              metrics=['accuracy'])\n","history = model.fit(train_images, train_labels, epochs=10, verbose=1)\n","score = model.evaluate(test_images, test_labels, verbose=0)\n","print('Test loss:', score[0])\n","print('Test accuracy:', score[1])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qDUehjFbcvOT","colab_type":"code","colab":{}},"source":["\n","score = model.evaluate(test_images, test_labels, verbose=0)\n","print('Test loss:', score[0])\n","print('Test accuracy:', score[1])"],"execution_count":null,"outputs":[]}]}